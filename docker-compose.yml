services:
  usermanagement_api:
    image: usermanagement.api
    build:
      context: .
      dockerfile: UserManagement.API/Dockerfile
    ports:
      - "5001:80"
    depends_on:
      - usermanagement_db
      - rabbitmq
      - elastic_search
      - kibana
      - log_stash
      - mock_smtp_server

  mail_service:
    image: mailservice
    build:
      context: .
      dockerfile: UserManagement.Mail.Service/Dockerfile
    ports:
      - "5002:80"
    networks:
      - backend
      - public
    depends_on:
      - mock_smtp_server
      - rabbitmq
      - usermanagement_db

  usermanagement_db:
    image: mcr.microsoft.com/mssql/server:2019-latest
    environment:
      SA_PASSWORD: "db+123456"
      ACCEPT_EULA: "Y"
      MSQSQL_BACKUP_DIR: "/var/opt/sqlserver/backups"
      MSSQL_DATA_DIR: "/var/opt/sqlserver/data"
      MSSQL_LOG_DIR: "/var/opt/sqlserver/logs"
      MSSQL_PID: "Developer"
      SERVER_COLLECTION: "TURKISH_CI_AS"
      SERVER_NAME: "msqsql_docker_server"
      SQL_ADMIN_LOGIN: "sa"
      SQL_ADMIN_PASSWORD: "db+123456"
    ports:
      - "1433:1433"
    volumes:
      - ./sqlserver:/var/opt/sqlserver

  rabbitmq:
    image: rabbitmq:3-management
    container_name: "rabbitmq"
    ports:
      - 5672:5672
      - 15672:15672
    # create a user, virtual host and set a password

    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
      - RABBITMQ_DEFAULT_VHOST=/
    volumes:
      - ./rabbitmq:/var/lib/rabbitmq
      - ./rabbitmq/definitions.json:/etc/rabbitmq/definitions.json

    networks:
      - rabbitmq_go_net
    hostname: local-queue
    command: [ "bash", "-c", "rabbitmq-server" ]

  elastic_search:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.15.0
    container_name: elastic_search
    environment:
      - node.name=es-node
      - cluster.name=docker-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./esdata:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
      - 9300:9300
    networks:
      - backend
      - rabbitmq_go_net
      - public

  kibana:
    image: docker.elastic.co/kibana/kibana:7.15.0
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - 5601:5601
    depends_on:
      - elastic_search
      - log_stash
      - rabbitmq
      - usermanagement_db
    networks:
      - backend
      - rabbitmq_go_net
      - public
    volumes:
      - ./kibana/kibana.yml:/usr/share/kibana/config/kibana.yml

  log_stash:
    image: docker.elastic.co/logstash/logstash:7.15.0
    container_name: log_stash
    volumes:
      - ./logstash/logstash.yml:/usr/share/logstash/config/logstash.yml
      - ./logstash/logstash.conf:/etc/logstash/conf.d/logstash.conf:ro
      - ./logstash/pipeline:/usr/share/logstash/pipeline
    environment:
      - "LS_JAVA_OPTS=-Xmx256m -Xms256m"
    ports:
      - "9400:9400"
    networks:
      - backend
      - rabbitmq_go_net
      - public
    command: logstash -f /etc/logstash/conf.d/logstash.conf

  mock_smtp_server:
    image: maildev/maildev
    container_name: fake_mail_server
    ports:
      - "1080:1080"
      - "1025:1025"
    networks:
      - backend
    restart: always

networks:
  rabbitmq_go_net:
    driver: "bridge"

  backend:
    name: "backend"
    driver: "bridge"
    driver_opts:
      com.docker.network.bridge.name: "backend"
    ipam:
      driver: default
      config:
        - subnet: 171.15.25.0/16

  public:
    name: "publicnet"
    driver: "bridge"
    internal: true
    driver_opts:
      com.docker.network.bridge.name: "publicnet"
    ipam:
      driver: default
      config:
        - subnet: 171.17.25.0/16
  usermanagement.apı:
    image: usermanagement.apı
    build:
      context: .
      dockerfile: UserManagement.API/Dockerfile
