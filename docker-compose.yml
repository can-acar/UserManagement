services:
  usermanagement_api:
    image: user-management-api
    build:
      context: .
      dockerfile: UserManagement.API/Dockerfile
    ports:
      - 5001:80
    networks:
      - mssql_server
      - rabbitmq
      - backend
      - public

  mail_service:
    image: user-management-service
    build:
      context: .
      dockerfile: UserManagement.MailService/Dockerfile
    ports:
      - "5002:80"
    networks:
      - mssql_server
      - rabbitmq
      - backend

  saga_machine:
    image: user-management-saga
    build:
      context: .
      dockerfile: UserManagement.Saga/Dockerfile
    ports:
      - "5003:80"
    networks:
      - rabbitmq

  user-management-db:
    image: mcr.microsoft.com/mssql/server:2019-latest
    environment:
      SA_PASSWORD: "db+123456"
      ACCEPT_EULA: "Y"
      MSQSQL_BACKUP_DIR: "/var/opt/sqlserver/backups"
      MSSQL_DATA_DIR: "/var/opt/sqlserver/data"
      MSSQL_LOG_DIR: "/var/opt/sqlserver/logs"
      MSSQL_PID: "Developer"
      SERVER_COLLECTION: "TURKISH_CI_AS"
      SERVER_NAME: "msqsql_docker_server"
      SQL_ADMIN_LOGIN: "sa"
      SQL_ADMIN_PASSWORD: "db+123456"
    ports:
      - "1433:1433"
    volumes:
      - type: bind
        source: ./sqlserver/data
        target: /var/opt/sqlserver/data
      - type: bind
        source: ./sqlserver/backups
        target: /var/opt/sqlserver/backups
      - type: bind
        source: ./sqlserver/logs
        target: /var/opt/sqlserver/logs
      - type: bind
        source: ./sqlserver/data
        target: /var/opt/mssql/data
      - type: bind
        source: ./sqlserver/backups
        target: /var/opt/mssql/backups
      - type: bind
        source: ./sqlserver/logs
        target: /var/opt/mssql/logs
    networks:
      - mssql_server

  rabbitmq:
    image: rabbitmq:3-management
    container_name: "rabbitmq"
    ports:
      - 5672:5672
      - 15672:15672
    # create a user, virtual host and set a password
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
      - RABBITMQ_DEFAULT_VHOST=/
    volumes:
      - ./rabbitmq/definitions.json:/etc/rabbitmq/definitions.json
    networks:
      - rabbitmq
      - backend
    hostname: local-queue
    command: [ "bash", "-c", "rabbitmq-server" ]

  elastic_search:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.15.0
    container_name: elastic_search
    environment:
      - node.name=es-node
      - cluster.name=docker-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
    networks:
      - backend

  kibana:
    image: docker.elastic.co/kibana/kibana:7.15.0
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - backend

  logstash:
    image: docker.elastic.co/logstash/logstash:7.14.0
    container_name: logstash
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
      - ./logstash/pipeline:/usr/share/logstash/pipeline
    environment:
      - "LOGSTASH_JAVA_OPTS=-Xmx256m -Xms256m"
    ports:
      - "5044:5044"
    networks:
      - backend

  mock_smtp_server:
    image: maildev/maildev
    container_name: fake_mail_server
    ports:
      - "1080:1080"
      - "1025:1025"
    networks:
      - backend
      - public

networks:
  mssql_server:
    name: "msqsql_server"
    driver: bridge
  
  backend:
    name: "backend"
    driver: bridge
  
  rabbitmq:
    name: "rabbitmq"
    driver: bridge
  
  public:
    name: "public"
    driver: bridge
    internal: true
